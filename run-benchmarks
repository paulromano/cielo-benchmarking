#!/bin/bash

#PBS -l nodes=2:ppn=8
#PBS -l walltime=48:00:00
#PBS -M paul.k.romano@gmail.com
#PBS -m e
#PBS -j oe

# Create timestamp
time=$(date +"%Y-%m-%d-%H%M%S")

# Set default values
: ${list:=benchmarks/lists/pst-short}
: ${particles:=1000}
: ${batches:=550}
: ${inactive:=50}
: ${code:=openmc}
: ${xsxml:=/opt/data/ace/nndc/cross_sections.xml}
: ${directory:=$time}

# Change to correct directory
if [[ ! -z $PBS_JOBID ]]; then
    cd $PBS_O_WORKDIR
    PATH=$PBS_O_PATH
fi
mkdir -p $directory
cd $directory

# Get copy of benchmarks repository and switch to nndc branch
if [[ ! -d benchmarks ]]; then
    git clone git@github.com:mit-crpg/benchmarks.git
fi

# Prepare benchmarks
echo Modifying run parameters...
for benchmark in $(cat $list); do
    sed -i -r -e "s:(<particles>).*(</particles>):\1${particles}\2:g" \
        -e "s:(<inactive>).*(</inactive>):\1${inactive}\2:g" \
        -e "s:(<batches>).*(</batches>):\1${batches}\2:g" \
        benchmarks/${benchmark}/settings.xml
done

# Remove previous results if they exist
rm -f ${directory}/results

# Run benchmarks
num=$(cat $list | wc -l)
i=0
basedir=$(pwd)
echo "Running benchmarks..."
for benchmark in $(cat $list); do
    i=$(expr $i \+ 1)
    echo $i $benchmark

    # Run openmc
    cd benchmarks/${benchmark}
    output=output_$directory
    if [[ ! -z $PBS_JOBID ]]; then
	CROSS_SECTIONS=${xsxml} mpiexec -rmk pbs $code > $output 2>&1
    else
	CROSS_SECTIONS=${xsxml} $code > $output 2>&1
    fi
    # mv tallies.out tallies_$time 2>/dev/null
    cd $basedir

    # Get k-effective
    k_mean=$(cat benchmarks/${benchmark}/$output | grep -a Combined | \
        sed -r -e 's_.*=(.*)\+/-.*_\1_g')
    k_unc=$(cat benchmarks/${benchmark}/$output | grep -a Combined | \
        sed -r -e 's_.*\+/-(.*)_\1_g')
    leak_mean=$(cat benchmarks/${benchmark}/$output | grep -a Leakage | \
        sed -r -e 's_.*=(.*)\+/-.*_\1_g')
    leak_unc=$(cat benchmarks/${benchmark}/$output | grep -a Leakage | \
        sed -r -e 's_.*\+/-(.*)_\1_g')
    echo $benchmark $k_mean $k_unc $leak_mean $leak_unc >> results
done

# Convert results to spreadsheet
echo Converting results to .xls...
python ../make-xls.py results
status=$?

# Create archive of outputs
echo Creating ${directory}/results_output.tar.gz
find . -name "output_${directory}" -o -name "tallies_${time}" | cut -c3- \
    | xargs tar czf results_output.tar.gz
