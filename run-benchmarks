#!/bin/bash

#PBS -l nodes=2:ppn=8
#PBS -l walltime=48:00:00
#PBS -M paul.k.romano@gmail.com
#PBS -m e
#PBS -j oe

# Create timestamp
time=$(date +"%Y-%m-%d-%H%M%S")

# Set default values
: ${list:=benchmarks/lists/pst-short}
: ${particles:=10000}
: ${max_batches:=10000}
: ${batches:=150}
: ${inactive:=50}
: ${threshold:=0.0001}
: ${code:=openmc}
: ${xsxml:=/opt/data/ace/nndc/cross_sections.xml}
: ${directory:=$time}
: ${atlf:=false}

# Change to correct directory
if [[ ! -z $PBS_JOBID ]]; then
    cd $PBS_O_WORKDIR
    PATH=$PBS_O_PATH
fi
mkdir -p $directory
cd $directory

# Get copy of benchmarks repository and switch to nndc branch
if [[ ! -d benchmarks ]]; then
    git clone https://github.com/mit-crpg/benchmarks.git
fi

# Prepare benchmarks
echo Modifying run parameters...
for benchmark in $(cat $list); do
    sed -i -r -e "s:(<particles>).*(</particles>):\1${particles}\2:g" \
        -e "s:(<inactive>).*(</inactive>):\1${inactive}\2:g" \
        -e "s:(<batches>).*(</batches>):\1${batches}\2:g" \
        -e "/<\/particles>/ a <keff_trigger type=\"std_dev\" threshold=\"${threshold}\" \/>" \
        -e "/<\/eigenvalue>/ a <trigger active=\"true\" max_batches=\"${max_batches}\" />" \
        benchmarks/${benchmark}/settings.xml
done

# Remove previous results if they exist
rm -f ${directory}/results

# Run benchmarks
num=$(cat $list | wc -l)
i=0
basedir=$(pwd)
echo "Running benchmarks..."
for benchmark in $(cat $list); do
    i=$(expr $i \+ 1)
    echo $i $benchmark
    cd benchmarks/${benchmark}

    # Create tallies.xml file
    cat <<EOF > tallies.xml
<?xml version="1.0"?>
<tallies>

  <tally id="1">
    <nuclides>all</nuclides>
    <scores>total absorption fission</scores>
  </tally>

</tallies>
EOF

    # Run OpenMC
    output=output_$directory
    if [[ ! -z $PBS_JOBID ]]; then
        OPENMC_CROSS_SECTIONS=${xsxml} mpiexec -rmk pbs $code > $output 2>&1
    else
        OPENMC_CROSS_SECTIONS=${xsxml} $code > $output 2>&1
    fi
    mv tallies.out tallies_$directory 2>/dev/null

    # Get results and collect in file
    cd $basedir
    k_mean=$(cat benchmarks/${benchmark}/$output | grep -a Combined | \
        sed -r -e 's_.*=(.*)\+/-.*_\1_g')
    k_unc=$(cat benchmarks/${benchmark}/$output | grep -a Combined | \
        sed -r -e 's_.*\+/-(.*)_\1_g')
    leak_mean=$(cat benchmarks/${benchmark}/$output | grep -a "Leakage Frac" | \
        sed -r -e 's_.*=(.*)\+/-.*_\1_g')
    leak_unc=$(cat benchmarks/${benchmark}/$output | grep -a "Leakage Frac" | \
        sed -r -e 's_.*\+/-(.*)_\1_g')
    if [[ $atlf ]]; then
        atlf_mean=$(cat benchmarks/${benchmark}/$output | grep -a "Above-thermal" | \
            sed -r -e 's_.*=(.*)\+/-.*_\1_g')
        atlf_unc=$(cat benchmarks/${benchmark}/$output | grep -a "Above-thermal" | \
            sed -r -e 's_.*\+/-(.*)_\1_g')
        echo $benchmark $k_mean $k_unc $leak_mean $leak_unc $atlf_mean $atlf_unc >> results
    else
        echo $benchmark $k_mean $k_unc $leak_mean $leak_unc >> results
    fi
done

# Convert results to spreadsheet
echo Converting results to .xls...
python ../make-xls.py results
status=$?

# Create archive of outputs
echo Creating ${directory}/results_output.tar.gz
find . -name "output_${directory}" -o -name "tallies_${directory}" | cut -c3- \
    | xargs tar czf results_output.tar.gz
